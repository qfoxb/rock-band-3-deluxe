{new Object fc_callback ;the main callback for all instruments
   (hit ;when a note is hit
      ;{coop_track_panel dx_set_star_display_pos}
      {dx_brutal_mode {modifier_mgr is_modifier_active mod_brutalmode}}
      {if {>= $speedmod $speedmod_top} ;if our current speed is higher than the top speed the player has reached in this run
         {set $speedmod_top $speedmod} ;set the top reached speed to the current speed
      }
      {dx_acceleration_mode {modifier_mgr is_modifier_active mod_fastermode} 1}
      {dx_check_for_high_score $dx_high_score_report}
   )
   (miss ;when a note is missed (overstrum)
      {beatmatch foreach_active_player $player ;handle adding the appropriate callbacks to each player
         {unless {! {eval {var {sprint {$player instrument} "_firstnote"}}}}
            {dx_miss_fc_remover $player {{$player get_user} get_slot_num}}
         }
      }
      {dx_acceleration_mode {modifier_mgr is_modifier_active mod_fastermode} 0}
      {dx_perfection_resetter {modifier_mgr is_modifier_active mod_perfection}}
   )
   (pass ;when a note is passed (ignored)
      {beatmatch foreach_active_player $player
         {dx_miss_fc_remover $player {{$player get_user} get_slot_num}} ;logic to remove the fc indicator upon miss/pass
      }
      {dx_acceleration_mode {modifier_mgr is_modifier_active mod_fastermode} 0}
      {dx_perfection_resetter {modifier_mgr is_modifier_active mod_perfection}}
   )
   (num_gems_hit 0) ;default setup state and storage for note counters
   (num_gems_combo 0) ;default setup state and storage for note counters
   (num_gems_miss 0) ;default setup state and storage for note counters
   (num_gems_pass 0) ;default setup state and storage for note counters
}
{func dx_create_instrument_callback
   ($instrument $player $slot)
   {set_var {sprint "dx_perfects_count_" $player} 0} ;shove this here so it resets for a player when callback is added
   {if {exists {sprint "fc_" $instrument "_callback"}} ;delete the object and recreate it if already exists
      {delete {sprint "fc_" $instrument "_callback"}}
   }
   {new Object {sprint "fc_" $instrument "_callback"}
      (track_instrument none)
      (player none)
      (slot none)
      (curr_ms 0)
      (diff none)
      (gem_id 0)
      (hit ;when a note is hit
         ($gem_id)
         ;store gem_id as fast as possible
         {set [gem_id] $gem_id}
         {if {exists {sprint "perfect_task_" [track_instrument]}} {delete {sprint "perfect_task_" [track_instrument]}}}
         {thread_task kTaskBeats
            (name {sprint "perfect_task_" [track_instrument]})
            (script
               {if {&& $dx_perfects_indicator {{[player] get_user} is_local} {== [diff] expert} {gamemode in_mode qp_coop}}
                  ;calculate this as early as possible for accuracy
                  {set [curr_ms] {'-' {beatmatch get_song_ms} {int {floor {'+' 0.5 {profile_mgr get_excess_audio_lag}}}}}}
                  {set [offset] FALSE}
                  {set [accuracy] -8675309}
                  ;failsafe, ensure the size of our tracker is the same as the reported total note count
                  {if {== {eval {var {sprint [track_instrument] "_note_tracker_2_size"}}} {[player] get_gem_count}}
                     {if {>= [gem_id] 0}
                        {set [accuracy] {'-' [curr_ms] {elem {eval {var {sprint [track_instrument] "_note_tracker_2"}}} [gem_id]}}}
                     }
                  }
                  {$this perfects_indicator [accuracy]}
               }
            )
         }
         ;then do other stuff
         {$this first_note}
         {$this check_fc} ;run the logic to check if we are in an fc or not
         {set [num_gems_hit] {'+' [num_gems_hit] 1}} ;increment the notes hit counter
         {set [num_gems_combo] {'+' [num_gems_combo] 1}} ;increment the notes comboed counter
         {dx_store_note_hit_info [slot] [track_instrument] [num_gems_hit] [num_gems_combo] [num_gems_pass] [num_gems_miss]}
         {dx_note_streak_popup $dx_note_streak_popups [player] [num_gems_combo]}
         {dx_indv_note_streak $dx_track_streak [player] [slot] [num_gems_combo] [num_gems_pass] [num_gems_miss]}
      )
      (miss ;when a note is missed (overstrum)
         {if {dx_check_first_note [track_instrument]}
            {set [num_gems_miss] {'+' [num_gems_miss] 1}} ;increment the notes missed counter
            {set [num_gems_combo] 0} ;reset the notes comboed counter
            {dx_store_note_hit_info [slot] [track_instrument] [num_gems_hit] [num_gems_combo] [num_gems_pass] [num_gems_miss]}
            {$this check_missed} ;run the logic to check our current misses
            {dx_indv_note_streak $dx_track_streak [player] [slot] [num_gems_combo] [num_gems_pass] [num_gems_miss]}
         }
      )
      (pass ;when a note is passed (ignored)
         {$this first_note}
         {set [num_gems_pass] {'+' [num_gems_pass] 1}} ;increment the notes passed counter
         {set [num_gems_combo] 0} ;reset the notes comboed counter
         {dx_store_note_hit_info [slot] [track_instrument] [num_gems_hit] [num_gems_combo] [num_gems_pass] [num_gems_miss]}
         {$this check_missed} ;run the logic to check our current misses
         {dx_indv_note_streak $dx_track_streak [player] [slot] [num_gems_combo] [num_gems_pass] [num_gems_miss]}
      )
      (first_note
         {if {! {dx_check_first_note [track_instrument]}} ;if the first note has not been hit/missed/passed yet, track that the first note has been hit/missed/passed
            {set [num_gems_hit] 0} {set [num_gems_miss] 0} {set [num_gems_pass] 0} {set [num_gems_combo] 0}
            {dx_set_first_note [track_instrument]}
         }
      )
      (check_fc
         {$this check_missed} ;run the logic to check our current misses
         {dx_fc_glow_enabler $dx_fc_glow [player] [num_gems_pass] [num_gems_miss]}
      )
      (check_missed
         {dx_fc_glow_disabler $dx_fc_glow [player] [slot] [num_gems_pass] [num_gems_miss]}
      )
      (offset 0)
      (timing 0)
      (accuracy 0)
      (negative 0)
      (total 0)
      (perfects 0)
      (perfects_indicator
         ($accuracy)
         {if {== $accuracy -8675309}
            {if_else {> {+ [num_gems_miss] [num_gems_hit] [num_gems_pass]} 10}
               {dx_perfect_hit $dx_perfects_indicator [track_instrument] [player] [slot] $dx_detailed_hit_stats [timing] hide}
               {dx_perfect_hit $dx_perfects_indicator [track_instrument] [player] [slot] $dx_detailed_hit_stats [timing] invalid}
            }
         }
         {if {!= $accuracy -8675309}
            {if_else {< [accuracy] 0}
               {do {set [accuracy] {'*' [accuracy] -1}} {set [negative] TRUE}}
               {set [negative] FALSE}
            }
            {if_else [offset]
               {if_else {< [offset] 0}
                  {if {< [accuracy] {'*' [offset] -1}} {set [offset] {if_else [negative] {'*' [accuracy] -1} [accuracy]}}}
                  {if {< [accuracy] [offset]} {set [offset] {if_else [negative] {'*' [accuracy] -1} [accuracy]}}}
               }
               {set [offset] {if_else [negative] {'*' [accuracy] -1} [accuracy]}}
            }
            {if [offset]
               ;TODO make this a setting
               {set [timing] perfect}
               {if {>= [offset] 1} {set [timing] late}}
               {if {<= [offset] -1} {set [timing] early}}
               #ifdef HX_WII {set $dx_wii_window_offset 66.73340006673341} #endif
               {cond
                  ({&& {< [offset] #ifdef HX_WII {+ 25 $dx_wii_window_offset} #else 25 #endif} {> [offset] #ifdef HX_WII {+ -25 $dx_wii_window_offset} #else -25 #endif}}
                     {dx_perfect_hit $dx_perfects_indicator [track_instrument] [player] [slot] $dx_detailed_hit_stats [timing] perfect}
                     {++ [perfects]} ;increment local counter
                     {dx_perfect_hit_ctr $dx_perfects_ctr [player] [slot] $dx_detailed_hit_stats [perfects]} ;fire on screen
                  )
                  ({&& {< [offset] #ifdef HX_WII {+ 40 $dx_wii_window_offset} #else 40 #endif} {> [offset] #ifdef HX_WII {+ -40 $dx_wii_window_offset} #else 40 #endif}}
                     {dx_perfect_hit $dx_perfects_indicator [track_instrument] [player] [slot] $dx_detailed_hit_stats [timing] great}
                  )
                  ({&& {< [offset] #ifdef HX_WII {+ 55 $dx_wii_window_offset} #else 55 #endif} {> [offset] #ifdef HX_WII {+ -55 $dx_wii_window_offset} #else -55 #endif}}
                     {dx_perfect_hit $dx_perfects_indicator [track_instrument] [player] [slot] $dx_detailed_hit_stats [timing] good}
                  )
                  {dx_perfect_hit $dx_perfects_indicator [track_instrument] [player] [slot] $dx_detailed_hit_stats [timing] bad}
               }
               ;poc, show extra hit effects, needs a lot of work
               ;{{{{{coop_track_panel find gem_track_resources} find smasher_plate_guitar} find gem_smasher0} find burn_bonus.trig} trigger}
               ;{{{{{coop_track_panel find gem_track_resources} find smasher_plate_guitar} find gem_smasher0} find hit_bonus.trig} trigger}
               ;{script_task kTaskSeconds
               ;   (delay 0.1)
               ;   (script
               ;      {{{{{coop_track_panel find gem_track_resources} find smasher_plate_guitar} find gem_smasher0} find stop_burn.trig} trigger}
               ;   )
               ;}
               {set [total] {+ [total] [offset]}}
               ;debug, show values
               {if $dx_judgment_dbg
                  {{coop_track_panel find tracker_broadcast_display} set_showing TRUE}
                  {{{coop_track_panel find tracker_broadcast_display} find band_message.lbl} set_showing TRUE}
                  {{coop_track_panel find tracker_broadcast_display} set_challenge_type kTrackerChallengeType_Streak}
                  {{coop_track_panel find tracker_broadcast_display} set_display_type kBroadcastTrackerDisplay_BandMessage}
                  {{coop_track_panel find tracker_broadcast_display} show_brief_band_message {symbol {sprint $sprinting}}}
                  {{coop_track_panel find tracker_broadcast_display} show_brief_band_message {symbol {sprint "Accuracy: " #ifdef HX_WII {- [offset] $dx_wii_window_offset} #else [offset] #endif " Avg: " #ifdef HX_WII {- {/ [total] [num_gems_hit]} $dx_wii_window_offset} #else {/ [total] [num_gems_hit]} #endif}}}
               }
            }
         }
      )
      (num_gems_hit 0) ;default setup state and storage for note counters
      (num_gems_combo 0) ;default setup state and storage for note counters
      (num_gems_miss 0) ;default setup state and storage for note counters
      (num_gems_pass 0) ;default setup state and storage for note counters
   }
   {{sprint "fc_" $instrument "_callback"} set track_instrument $instrument} ;finally, apply the correct instrument to the object
   {{sprint "fc_" $instrument "_callback"} set player $player}
   {{sprint "fc_" $instrument "_callback"} set slot $slot}
   {{sprint "fc_" $instrument "_callback"} set diff {{$player get_user} get_difficulty_sym}}
}
{new Object dx_streak_callback
   (hit {$this update_streak})
   (miss {$this update_streak})
   (pass {$this update_streak})
   (fetch_all_streaks
      {beatmatch foreach_active_player $player ;iterate through each player, grab the combo from the relevant callback, add them all together
         {if {! {eval {var {sprint {$player instrument} "_finalnote"}}}}
            {set $dx_streak 0}
            {set $dx_streak {+ $dx_streak {eval {var {sprint "num_gems_combo_" {{$player get_user} get_slot_num}}}}}}
         }
      }
   )
   (update_streak
      {if {! {gamemode in_mode trainer}}
         {if {== $dx_streak_counter off}
            {dx_game_hud_label dx_hud_label_band_streak $dx_hud_band_streak_text_size $dx_hud_band_streak_text_font $dx_hud_band_streak_text_alignment $dx_hud_band_streak_text_kerning $dx_hud_band_streak_text_x $dx_hud_band_streak_text_z $dx_hud_band_streak_text_y $dx_hud_band_streak_text_r $dx_hud_band_streak_text_g $dx_hud_band_streak_text_b TRUE}
         }
         {if
            {||
               {&& {== $dx_streak_counter single} {== $dx_num_active_instruments 1}}
               {&& {== $dx_streak_counter multi} {> $dx_num_active_instruments 0}}
            }
            {do
               {$this fetch_all_streaks}
               {set_this {coop_track_panel find scoreboard}}
               {if_else {> $dx_streak 0}
                  ;TEMP currently disabled hud streak
                  {dx_hud_label_band_streak.lbl set_token_fmt os_blnk}
                  {dx_hud_label_band_streak.lbl set_token_fmt os_blnk}
               }
               {if_else {dx_check_for_band_miss}
                  {dx_hud_label_band_streak.color set color {pack_color $dx_gold_ui_r $dx_gold_ui_g $dx_gold_ui_b}}
                  {dx_hud_label_band_streak.color set color {pack_color $dx_hud_band_streak_text_r $dx_hud_band_streak_text_g $dx_hud_band_streak_text_b}}
               }
            }
         }
      }
   )
}